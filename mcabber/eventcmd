#!/bin/bash

AW_ALERT=~/.mcabber/aw-alert.sh
LOG=~/.mcabber/eventcmd.log
EVENT_LOG=~/.mcabber/event.log

exec >> $LOG 2>&1

DBG=0

dbg() {
  [[ $DBG == 0 ]] && echo "[DEBUG] : "$1
}

info() {
  echo "[INFO] : $1"
}

warn() {
  echo "[WARN] : $1"
}

err() {
  echo "[ERROR] : $1"
}

event_type=$1
arg1=$2
arg2=$3
filename=$4

dbg "$event_type $arg1 $arg2 $filename"


echo "$event_type $arg1 $arg2 $filename" >> $EVENT_LOG


title="mcabber"
timeout=10000

new_message_in() {
  local jid=$1
  dbg "./aw-alert.sh -s 1 -y $timeout -t \"$title\" -m \"New message from $jid.\" -w 700"
  $AW_ALERT -s 1 -y $timeout -t "$title" -m "New message from $jid." -w 700
}

status_message() {
  local jid=$1
  local status=$2
  dbg "./aw-alert.sh -s 1 -y $timeout -t \"$title\" -m \"Status changed for $jid to $status.\" -w 700"
  $AW_ALERT -s 1 -y $timeout -t "$title" -m "Status changed for $jid to $status." -w 700
}

if [ $event_type = "MSG" ]; then
  case "$arg1" in
    IN)
      # Incoming message from buddy $arg2
      new_message_in "$arg2"
      if [ -n "$filename" -a -f "$filename" ]; then
        # We could process filename here...
        echo > /dev/null
      fi
      ;;
    MUC)
      # Groupchat message in room $arg2
      if [ -n "$filename" -a -f "$filename" ]; then
        echo > /dev/null
        # We could process filename here...
      fi
      ;;
    OUT)
      # Outgoing message for buddy $arg2
      ;;
  esac
elif [ $event_type = "STATUS" ]; then
  # Buddy $arg2 status is $arg1 (_, O, I, F, D, N, A)
  # status_message "$arg2" "$arg1"
  echo > /dev/null
elif [ $event_type = "UNREAD" ]; then
  # $arg1 contains 4 numbers separated with space chars:
  # Nr of unread buffers, nr of unread buffers with attention sign,
  # nr of MUC unread buffers, nr of MUC unread buffers with attention sign.
  echo > /dev/null
fi
